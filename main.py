# main_generator.py
# Final, polished version with a modern, full-height image layout.

import json
import os
import time
from pptx_utils import PptxHelper # Make sure you have the latest version of this file
from ai_tools import PollinationsAI # And this one too

# --- CONFIGURATION ---
# IMPORTANT: PASTE YOUR API TOKEN HERE
API_TOKEN = "YWKQ3aDYl7X7JaNJ"

CONFIG = {
    "num_slides": 6,
    "output_filename": "AI_Generated_Presentation.pptx",
    "image_model": "flux",
    "text_model": "openai-large",
}

# --- FUNCTIONS get_presentation_plan, gather_image_assets, cleanup_temp_files ---
# These functions from the previous step are already correct and do not need changes.
# I will include them here for completeness, but the only change is in build_presentation.

def get_presentation_plan(ai_client, topic, num_slides):
    """Step 1: Generate the entire presentation plan as a single JSON object."""
    print(f"\n[1/3] üìù Generating presentation plan for '{topic}'...")
    system_prompt = "You are an expert presentation creator. Your task is to generate the content for a presentation in a single, valid JSON object. You must only output the raw JSON."
    user_prompt = f"""
    Create a presentation about "{topic}". It must have {num_slides} slides.
    Format the response as a JSON object with a key "slides", which is a list of slide objects.
    Each slide object must have "title" (string), "content" (array of strings for bullets), and "imagePrompt" (string).
    For the first slide, "content" should be a single-element array with a subtitle.
    """
    try:
        response_text = ai_client.generate_text(prompt=user_prompt, system_prompt=system_prompt, model=CONFIG["text_model"])
        if response_text.startswith("```json"): response_text = response_text[7:-3].strip()
        data = json.loads(response_text)
        if "slides" in data and isinstance(data["slides"], list):
            print("‚úÖ Plan generated successfully.")
            return data["slides"]
        else:
            print("‚ùå ERROR: The AI returned an invalid or empty plan.")
            return None
    except Exception as e:
        print(f"‚ùå CRITICAL ERROR during planning: {e}\nAI Response:\n{response_text}")
        return None

def gather_image_assets(ai_client, plan):
    """Step 2: Generate and save all images required by the plan."""
    print(f"\n[2/3] üé® Gathering image assets for {len(plan)} slides...")
    assets = []
    for i, slide_data in enumerate(plan):
        asset_data = slide_data.copy()
        asset_data["image_path"] = None
        if i > 0 and slide_data.get("imagePrompt"): # No image for title slide
            print(f"  - Generating image for slide {i+1}...")
            output_path = f"temp_slide_{i+1}_image.png"
            try:
                ai_client.generate_image(prompt=slide_data["imagePrompt"], output_path=output_path, width=1000, height=1125, nologo=True, enhance=True)
                asset_data["image_path"] = output_path
            except Exception as e:
                print(f"    ‚ùå WARNING: Could not generate image for slide {i+1}. Error: {e}")
        assets.append(asset_data)
    print("‚úÖ All image assets gathered.")
    return assets

def cleanup_temp_files(assets):
    """Deletes the temporary image files."""
    print("\nüßπ Cleaning up temporary image files...")
    cleaned_count = 0
    for asset in assets:
        path = asset.get("image_path")
        if path and os.path.exists(path):
            os.remove(path)
            cleaned_count += 1
    print(f"‚úÖ {cleaned_count} files cleaned up.")

# ==============================================================================
#                      --- MODIFIED FUNCTION BELOW ---
# ==============================================================================

def build_presentation(assets, output_filename):
    """
    Step 3: Assemble the final .pptx file with a polished, modern layout.
    """
    print(f"\n[3/3] üî® Assembling the presentation file with new layout...")
    ppt = PptxHelper() # Uses the latest pptx_utils.py

    # --- Build Title Slide (Unchanged) ---
    title_asset = assets[0]
    subtitle = title_asset['content'][0] if title_asset.get('content') else "Generated by AI"
    ppt.add_title_slide(title_asset['title'], subtitle)
    print(f"  - Added Title Slide: '{title_asset['title']}'")

    # --- Build Content Slides with new layout ---
    for i, asset in enumerate(assets[1:]):
        slide_num = i + 2
        print(f"  - Adding Content Slide {slide_num}/{len(assets)}: '{asset['title']}'")
        
        slide = ppt.add_blank_slide()

        # Add Title TextBox (Larger font, positioned on the left)
        # Coordinates: left, top, width, height
        ppt.add_textbox(slide, asset['title'], 
                        left=0.5, top=0.5, width=4.0, height=1.0, 
                        font_size=36) # Increased font size
        
        # Add Bullet Points TextBox (Larger font, positioned on the left)
        ppt.add_bullet_list(slide, asset['content'], 
                            left=0.5, top=1.5, width=4.0, height=3.8, 
                            font_size=20) # Increased font size
        
        # Add Full-Height Image on the right
        if asset.get("image_path"):
            # Use the add_picture function directly to control height
            from pptx.util import Inches
            slide.shapes.add_picture(
                asset["image_path"],
                left=Inches(5.0),    # Start at the horizontal midpoint
                top=Inches(0),       # Start at the very top
                width=Inches(5.0),   # Occupy the right half
                height=Inches(5.625) # Full slide height
            )
            print("    - Full-height image added.")

    # --- Add Final Slide (Unchanged) ---
    ppt.add_end_slide()
    print("  - Added final 'Thank You' slide.")
    
    ppt.save(output_filename)
    print(f"\nüéâ Presentation with polished layout saved successfully as '{output_filename}'!")


# ==============================================================================
#                      --- MAIN EXECUTION BLOCK (Unchanged) ---
# ==============================================================================

if __name__ == '__main__':
    print("=" * 60, "\n          AI PowerPoint Presentation Generator\n", "=" * 60)
    
    if API_TOKEN == "PASTE_YOUR_API_TOKEN_HERE" or not API_TOKEN:
        print("\n‚ùå SETUP REQUIRED ‚ùå\nPlease edit 'main_generator.py' and provide your API token.\n")
        exit()

    presentation_topic = input("Enter the topic for your presentation: ")
    if not presentation_topic.strip(): exit("No topic entered. Exiting.")
        
    start_time = time.time()
    try:
        ai_client = PollinationsAI(api_token=API_TOKEN)
        plan = get_presentation_plan(ai_client, presentation_topic, CONFIG["num_slides"])
        
        if plan:
            assets = gather_image_assets(ai_client, plan)
            build_presentation(assets, CONFIG["output_filename"])
            cleanup_temp_files(assets)

    except Exception as e:
        print(f"\n‚ùå A critical error occurred in the main script: {e}")
    
    print(f"\nTotal time taken: {time.time() - start_time:.2f} seconds. Program finished.")